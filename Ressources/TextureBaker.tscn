[gd_scene load_steps=13 format=2]

[ext_resource path="res://Ressources/rock/3d-cnoise.png" type="Texture" id=1]
[ext_resource path="res://Ressources/rock/2d-cnoise-2x2.png" type="Texture" id=2]
[ext_resource path="res://Ressources/grass/PerlinNoise.png" type="Texture" id=3]

[sub_resource type="Shader" id=6]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx, unshaded;

// Moss parameters
uniform sampler2D moss_noise : hint_black;
uniform vec4 moss_albedo : hint_color;
uniform float moss_scale : hint_range(0,100);
uniform sampler2D moss_threshold_gradient : hint_black;

// Perlin Parameters
uniform float moss_perlin_threshold : hint_range(0,1);
uniform float moss_amplitude : hint_range(0,10) = 2;
uniform float moss_frequency : hint_range(0,100) = 4;
uniform float moss_persistence : hint_range(0,1) = 0.2;
uniform int moss_nboctaves : hint_range(0,10) = 4;

// Cracks Parameters
uniform vec4 cracks_albedo : hint_color;
uniform float threshold : hint_range(0,1);
uniform float scale : hint_range(0,100);
uniform sampler2D cracks_noise : hint_black;
uniform sampler2D threshold_gradient : hint_black;

// Perlin Parameters
uniform float perlin_threshold : hint_range(0,1);
uniform float amplitude : hint_range(0,10) = 2;
uniform float frequency : hint_range(0,100) = 4;
uniform float persistence : hint_range(0,1) = 0.2;
uniform int nboctaves : hint_range(0,10) = 4;

// Material Parameters
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_metallic : hint_white;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_white;
uniform vec4 roughness_texture_channel;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset; 

// Noise functions
vec2 hash(vec2 p) {
	p = vec2(dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)));
	return -1.0 + 2.0*fract(sin(p)*43758.5453123);
}

float gnoise(vec2 p) {
	vec2 i = floor( p );
	vec2 f = fract( p );
	vec2 u = f*f*(3.0-2.0*f);
	return mix( mix( dot( hash( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),
				dot( hash( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),
				mix( dot( hash( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),
				dot( hash( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);
}

float pnoise(vec2 p,float amp,float freq,float pers, int nboct) {
	float a = amp;
	float f = freq;
	float n = 0.0;
	for(int i=0;i<nboct;++i) {
		n = n+a*gnoise(p*f);
		f = f*2.;
		a = a*pers;
	}
	return n;
}

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}

void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	float perlin = pnoise(UV,amplitude,frequency,persistence,nboctaves);
	
	if( perlin > perlin_threshold && texture(cracks_noise,UV*scale).r > texture(threshold_gradient,vec2(perlin/2.)).r){
		ALBEDO = cracks_albedo.rgb;
	} else {
		ALBEDO = albedo.rgb;
	}
	
	perlin = pnoise(UV,moss_amplitude,moss_frequency,moss_persistence,moss_nboctaves);
	if( perlin > moss_perlin_threshold && texture(moss_noise,UV*moss_scale).r > texture(moss_threshold_gradient,vec2(perlin)).r){
		ALBEDO = mix(ALBEDO,moss_albedo.rgb,0.75);
	}
	
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
}
"

[sub_resource type="Gradient" id=2]
colors = PoolColorArray( 1, 1, 1, 1, 0, 0, 0, 1 )

[sub_resource type="GradientTexture" id=3]
gradient = SubResource( 2 )

[sub_resource type="Gradient" id=4]
colors = PoolColorArray( 1, 1, 1, 1, 0.195313, 0.195313, 0.195313, 1 )

[sub_resource type="GradientTexture" id=5]
gradient = SubResource( 4 )

[sub_resource type="ShaderMaterial" id=7]
shader = SubResource( 6 )
shader_param/moss_albedo = Color( 0.270588, 0.411765, 0.258824, 1 )
shader_param/moss_scale = 11.0
shader_param/moss_perlin_threshold = 0.0
shader_param/moss_amplitude = 1.5
shader_param/moss_frequency = 6.1
shader_param/moss_persistence = 1.0
shader_param/moss_nboctaves = 3
shader_param/cracks_albedo = Color( 0.0941176, 0.0980392, 0.109804, 1 )
shader_param/threshold = 0.3
shader_param/scale = 9.0
shader_param/perlin_threshold = 0.0
shader_param/amplitude = 10.0
shader_param/frequency = 27.0
shader_param/persistence = 0.415
shader_param/nboctaves = 4
shader_param/albedo = Color( 0.207843, 0.223529, 0.235294, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/metallic_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/roughness_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/moss_noise = ExtResource( 2 )
shader_param/moss_threshold_gradient = SubResource( 3 )
shader_param/cracks_noise = ExtResource( 1 )
shader_param/threshold_gradient = SubResource( 5 )

[sub_resource type="QuadMesh" id=1]

[sub_resource type="Shader" id=8]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_alpha_prepass,cull_disabled,diffuse_burley,specular_schlick_ggx, unshaded;

// Perlin Parameters
uniform float amplitude : hint_range(0,10) = 2;
uniform float frequency : hint_range(0,100) = 4;
uniform float persistence : hint_range(0,1) = 0.2;
uniform int nboctaves : hint_range(0,10) = 4;

uniform vec4 colorTop : hint_color;
uniform vec4 colorBottom : hint_color;

uniform float _YSpacing : hint_range(0,1) = 1.0;
//uniform sampler2D grassTexture;

uniform sampler2D _NoiseTexture;
uniform vec2 _NoiseScale = vec2(1,1);

uniform float _Wind = 0.002;

varying vec2 vertex_position;
varying float height;

// Noise functions
vec2 hash(vec2 p) {
	p = vec2(dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)));
	return -1.0 + 2.0*fract(sin(p)*43758.5453123);
}

float gnoise(vec2 p) {
	vec2 i = floor( p );
	vec2 f = fract( p );
	vec2 u = f*f*(3.0-2.0*f);
	return mix( mix( dot( hash( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),
				dot( hash( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),
				mix( dot( hash( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),
				dot( hash( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);
}

float pnoise(vec2 p,float amp,float freq,float pers, int nboct) {
	float a = amp;
	float f = freq;
	float n = 0.0;
	for(int i=0;i<nboct;++i) {
		n = n+a*gnoise(p*f);
		f = f*2.;
		a = a*pers;
	}
	return n;
}

void vertex() {
	UV=UV;
}

void fragment(){
	
	vec2 scrollUV = UV;
	scrollUV.x += _Wind/100.0*cos( TIME*1.0)*height;
	scrollUV.y += _Wind/100.0*cos( TIME*3.0)*height;
	vec4 col = mix(colorBottom,colorTop,height);
	float noise = pnoise(scrollUV*_NoiseScale,amplitude,frequency,persistence,nboctaves);
	ALBEDO.rgb = vec3(noise,noise,noise);
}"

[sub_resource type="ShaderMaterial" id=9]
resource_local_to_scene = true
shader = SubResource( 8 )
shader_param/amplitude = 1.5
shader_param/frequency = 8.0
shader_param/persistence = 0.2
shader_param/nboctaves = 4
shader_param/colorTop = Color( 0.333333, 0.533333, 0.258824, 1 )
shader_param/colorBottom = Color( 0.137255, 0.215686, 0.105882, 1 )
shader_param/_YSpacing = 1.0
shader_param/_NoiseScale = Vector2( 40, 40 )
shader_param/_Wind = 0.5
shader_param/_NoiseTexture = ExtResource( 3 )

[node name="TextureBaker" type="Spatial"]

[node name="RockTexture" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )
visible = false
material_override = SubResource( 7 )
mesh = SubResource( 1 )
material/0 = null

[node name="GrassNoise" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )
material_override = SubResource( 9 )
mesh = SubResource( 1 )
material/0 = null

[node name="Camera" type="Camera" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1 )
projection = 1
current = true
fov = 75.7855
